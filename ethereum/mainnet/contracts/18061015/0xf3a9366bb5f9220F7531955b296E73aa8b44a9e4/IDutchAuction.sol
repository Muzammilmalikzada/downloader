// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;
pragma experimental ABIEncoderV2;

/**
 * @title Interface for Dutch Auction
 */
interface IDutchAuction {
    struct NftContractList {
        // The NFT contract of Erc-721/1155 for Sale
        address nftContractAddress;
        // The From tokenId of the nft for sale
        uint256 startTokenId;
        // The To tokenId of the nft for sale
        uint256 endTokenId;
        // The quantity of each token If Erc-1155 collection
        uint256 unit1155;
        // The address of the token owner
        address tokenOwner;
        // total number of nfts for sale
        uint64 noOfTokens;
        // The limit which an each address is allowed
        uint64 walletLimit;
        // The limit for each transaction
        uint64 txnLimit;
        // To specify for mint on Demand
        bool isMint;
        // the max token id randge to mint
        int256 maxTokenIDRange;
        // To specify nft for Instant Delivery
        bool isInstantDeliver;
        // To be Specified for allowing rebate
        bool isRebate;
        // To be Specified for allowing discount
        bool isDiscountRequired;
        // To specify for AuthSign for buy
        bool isSignerRequired;
        // select the type of sale
        TypeOfSale saleType;
        // The root hash of the whitelisted buyers
        bytes32 blacklistedBuyers;
    }

    enum TypeOfSale {
        // refers for sale type of Erc-721 collections
        erc_721_nft_type,
        // refers for sale type of Erc-1155 collections with multiple Quantity
        single_tokens_multiple_Quantity,
        // refers for sale type of Erc-1155 collections with multiple tokens with Same Quantity
        multiple_tokens_with_Same_Quantity
    }

    struct DutchAuctionList {
        // details of the nft collection list
        NftContractList collectionList;
        // The starting price of the sale
        uint128 startingPrice;
        // The minimum price of the sale
        uint128 reservedPrice;
        // The price to be reduced in certain time interval
        uint128 reducePrice;
        // The time of the sale starts
        uint32 auctionStartTime;
        // The time of the sale ends
        uint32 auctionEndTime;
        // The time interval of the price decrement
        uint32 timeForPriceDecrement;
        // The start time for price decrement to half of previous price
        uint32 halfLifeTime;
        // The allowed Payment Currency for the sale
        address paymentCurrency;
        // The list of settlement Address and Settlement Price
        SettlementList payoutList;
    }

    struct SettlementList {
        // The settlement address for the listed tokens
        address payable paymentSettlementAddress;
        // The tax settlement address for settlement of tax fee
        address payable taxSettlementAddress;
        // The commission address for settlement of commission fee
        address payable commissionAddress;
        // The platform address for settlement of platform fee
        address payable platformSettlementAddress;
        // The commission fee given in basis points
        uint16 commissionFeePercentage;
        // The platform fee given in basis points
        uint16 platformFeePercentage;
    }

    struct BuyerDetails {
        // The price of the NFTs while buying
        uint256[] price;
        // The quatity of the nfts
        uint256[] quantity;
        // The tax for price
        uint256[] tax;
        // The discount price of the nfts
        uint256[] priceDiscount;
        // The nft quantity bought at the discount price
        uint256[] quantityDiscount;
        // The tax for discount price
        uint256[] taxDiscount;
        // The Total tokens purchased by seller
        uint256 totalCap;
        // The rebate claimed status
        bool rebateClaimed;
    }

    struct LatestSaleDetails {
        // The price of the latest sale
        uint256 finalPrice;
        // The id of the next token to buy
        uint256 nextTokenId;
        // The total number of tokens purchased
        uint256 currentSupply;
        // The total number of tokens purchased with full discount
        uint256 fullDiscountSupply;
        // The total number of tokens purchased with zero discount
        uint256 zeroDiscountSupply;
        // represents that auction is ended or not
        bool auctionEnded;
        // represents that maxId reached
        bool isReachedMaxId;
    }

    struct Discount {
        // The discount percentage
        uint16 discountPercentage;
        // The expire timeof discount signature
        uint32 expirationTime;
        // The nonce value
        string nonce;
        // The signature generated by admin
        bytes signature;
        // The signer of the signature.
        address signer;
    }

    struct BuyList {
        // The buy amount to purchase NFT(s)
        uint256 price;
        // The tax amount of the purchase
        uint256 tax;
        // The number of tokens to be purchased
        uint256 quantity;
        // The quantity for 1155 if ERC1155
        uint256 unit1155;
        // The merkle tree path of buyer address
        bytes32[] blacklistedProof;
        // the discount information
        IDutchAuction.Discount discount;
    }

    function usedAuctionId(string memory dutchAuctionID)
    external view returns (bool);

    /**
     * @notice checks the address is admin address ornot
     * @param walletAddress the id of the created auction
     */
    function isAdmin(address walletAddress) external view returns (bool);

    /**
     * @notice checks the signature is used already or not
     * @param signature the discount signature
     */
    function discountUsed(bytes memory signature) external view returns (bool);

    /**
     * @notice gets the detils of the listed sale
     * @param dutchAuctionID the id of the created auction
     */
    function getListings(
        string memory dutchAuctionID
    ) external view returns (DutchAuctionList memory auctionist);

    /**
     * @notice gets the detils collection details of listed sale
     * @param dutchAuctionID the id of the created auction
     */
    function getLatestSaleInfo(
        string memory dutchAuctionID
    ) external view returns (LatestSaleDetails memory saleDetails);

    /**
     * @notice gets the buyers sale info of the listed sale
     * @param dutchAuctionID the id of the created auction
     * @param buyer the address of the buyer
     */
    function getBuyerInfo(
        string memory dutchAuctionID,
        address buyer
    ) external view returns (BuyerDetails memory buyerDetails);

    /**
     * @notice gets the list of all the buyers in the sale
     * @param dutchAuctionID the id of the created auction
     */
    function getBuyerAddress(
        string memory dutchAuctionID
    ) external view returns (address[] memory buyers);

    /**
     * @notice validates auction data before auction creation and updation
     * @param auctionList the List of the auction data
     */
    function __beforeCreateAuction(
        DutchAuctionList memory auctionList
    ) external view;

    /**
     * @notice validates tha buy data before buy in dutch Auction
     * @param dutchAuctionID the id of the created auction
     */
    function __buyValidation(
        string memory dutchAuctionID,
        address buyer,
        IDutchAuction.BuyList memory buyList
    ) external view returns (uint256, uint256);

    /**
     * @notice gets the current dutch auction price
     * @param dutchAuctionId the id of the created auction
     */
    function getCurrentDutchPrice(
        string memory dutchAuctionId
    ) external view returns (uint256 currentPrice);

    /**
     * @notice gets the claimable amount in rebate type auction
     * @param dutchAuctionID the id of the created auction
     * @param buyer the address of buyer wallet
     */
    function claimable(
        string memory dutchAuctionID,
        address buyer
    ) external view returns (uint256 totalClaimable, uint256 totalTaxClaimable);

    /**
     * @notice gets the settlement amount and tax for endAuction()
     * @param dutchAuctionID the id of the created auction
     */
    function computeSettlementAmountAndTax(
        string memory dutchAuctionID
    ) external returns (uint256, uint256);
}
